formatter: markdown table

version: ""

header-from: main.tf
footer-from: ""

recursive:
  enabled: false
  path: modules
  include-main: true

sections:
  hide: []
  show: []

  hide-all: false # deprecated in v0.13.0, removed in v0.15.0
  show-all: true # deprecated in v0.13.0, removed in v0.15.0

content: |-
  # it-ae-tfmod-azure-state

  This is a terraform module for initializing a terraform state backend in Azure.
  By default, it creates a resource group named `terraform-state`, a storage account with a unique name, and a container named "terraform-state".

  ## Generation

  This file was generated with the following command:

  ```bash
  terraform-docs .
  ```

  ## Example usage

  A common pattern for using this is to create a folder within your terraform IaC project for setting up your environment, such as `/environments/{env_name}/setup`, containing a `main.tf` like:

  ```terraform
  module "state_backend" {
    source = "github.com/tamu-edu/it-ae-tfmod-azure-state?ref=v0.1.2"

    container_name = "tfstate"
    location = "southcentralus"
    resource_group_name = "your-project-tfstate-dev"
    # storage_account_name = "LeaveBlankToAutoGen"
    subscription_id = "f5358b4a-0a02-4485-8157-367fc107a27d"
    tenant_id = "68f381e3-46da-47b9-ba57-6f322b8f0da1"

    remove_secrets_from_state = false
  }

  # Note: Azure does not automatically grant access to the storage account to its creator, so this module does.
  # To grant access to someone or something else (such as a service principal) you will need to implement your own role scope grant. Ex:
  resource "azurerm_role_assignment" "tfstate_role_assignment" {
    scope                = module.state_backend.container_role_access_scope
    role_definition_name = "Storage Blob Data Contributor"
    principal_id         = "<object id of entity you need to have access>" 
  }

  output "container_name" {
    value = module.state_backend.container_name
  }
  output "resource_group_name" {
    value = module.state_backend.resource_group_name
  }
  output "storage_account_name" {
    value = module.state_backend.storage_account_name
  }
  ```

  To execute, first `az login` with an appropriately permissioned Azure account using the Azure CLI. Once logged in, run command `terraform init` within the new `terraform-state` folder. Then, run `terraform plan` to see what will be created. If satisfied with the results, run command `terraform apply`. This will create the appropriate Azure Blob Storage for holding state files for the main project. Azure Blobs are semaphore-locked from concurrent writes automatically. The state file for this remote state terraform script will be stored on the file system. Be sure to capture the results of the output (run `terraform output` to see it again) and copy it into your main Terraform stack variables. It is recommended to alter the name of the key to fit the granularity of separation of concerns that you require. By default, this will assign the role "Storage Blob Data Contributor" on the created tfstate container to the identity that runs this terraform.

  > [!CAUTION]
  > The generated Azure storage account resource will contain storage account access keys to it if this feature is not disabled in Azure. Do not commit the statefile generated by this module until either the access keys are removed, rotated, or access keys disabled in Azure.
  > By default, this module sanitizes the tfstate file for you. Toggle the input `remove_secrets_from_state` to `false` to prevent this behavior.

  > [!NOTE]
  > If you are using an identity that has limited access to the Azure subscription, be sure to set the value of `resource_provider_registrations` to `none`. If this is the case, you will also need to work with someone who has owner access to the subscription to enable provider registration for all the API's that you may need to use. You may also want to set the value of `create_resource_group` to `false` if the resource group has already been created for you. Additionally, if you have never done any resource provider registrations in a subscription, note that the first run of `terraform plan` or `terraform apply` may take quite some time as the provider will attempt to automatically do the provider registration.

  ## Example consumption of created backend storage

  Use the generated `backend_config` output to help you consume this generated tfstate "azurerm" Terraform backend storage. Note that it is configured to use the `Azure Active Directory with Azure CLI` method for authentication as documented [here](https://developer.hashicorp.com/terraform/language/backend/azurerm#azure-active-directory-with-azure-cli). If you need a different method, you will need to edit it per that documentation.

  Your calling Terraform code could work with the output to automatically create (and manage) a standalone backend block file. In this example, the consuming Terraform code sits just above this tfstate setup folder:

  ```terraform
  resource "local_file" "backend_config" {
    content  = local.backend
    filename = "${path.root}/../backend.tf"
  }
  ```

  {{ .Requirements }}

  {{ .Providers }}

  {{ .Resources }}

  {{ .Inputs }}

  {{ .Outputs }}

  These output values will serve as your terraform IaC project inputs.

output:
  file: README.md
  mode: replace
  template: |-
    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->

output-values:
  enabled: false
  from: ""

sort:
  enabled: true
  by: name

settings:
  anchor: true
  color: true
  default: true
  description: false
  escape: true
  hide-empty: true
  html: true
  indent: 2
  lockfile: true
  read-comments: true
  required: true
  sensitive: true
  type: true
